{"name":"openjudge","tagline":"LAN hosted programming contest judge.","body":"OpenJudge\r\n=========\r\n\r\nv 0.4.0\r\n\r\nA judge made to judge the programming competitions held over LAN.\r\n\r\n- python3\r\n- python2\r\n- gcc\r\n- g++\r\n- java\r\n \r\nSupported out of the box.\r\n\r\nWhy?\r\n----\r\n\r\n- Judging programs by hand quickly becomes an experience best forgotten\r\n- Roll-my-own\r\n\r\nSetup\r\n-----\r\n\r\n```\r\ncd ~\r\ngit clone --depth 1  https://github.com/theSage21/openjudge\r\nvirtualenv -p python3 env\r\nsource env/bin/activate\r\n./setup.sh\r\n```\r\n\r\n\r\n`./setup.sh` does most of the work for you.\r\n\r\n\r\nThe interface is set up as a standard django server. I prefer using Nginx,Gunicorn as a \r\ncombination. Check my [blog](http://arjoonn.blogspot.com/2015/05/django-gunicorn-and-nginx.html) for how to set that up.\r\n`setup.sh` only sets up the code for you. You still need to deploy on your own.\r\n\r\nNote that the judge will have to run on a linux like machine. I shamelessly used redirection\r\nand I have no idea how they translate on a windows box if they do at all. Besides that, \r\nthe interface can run on another machine and the judge on another.\r\n\r\nUsage during the competition\r\n----------------------------\r\n\r\n1. Run the interface with `./server.sh`\r\n2. Signup users\r\n    - Signup\r\n    - Login\r\n    - Register for a contest\r\n3. Tell everyone to navigate to the webserver. It will be something like `192.168.1.45`\r\n4. Enjoy the fruits of watching a hundred people program.\r\n\r\nGotchas\r\n-------\r\nSome features are not available. If you want you can implement them yourself.\r\n\r\n- No sandboxing.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}